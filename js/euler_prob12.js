/*
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
*/

'use static'

const _ = require('lodash/fp')

const _range = _.curry((start, end) => {
    const array = []
    for (let i = start; i <= end ; i++) {
        array.push(i)
    }
    return array
})

const _rangeFromOne = _range(1)

const _map = _.curry((fn, array) => array.map(fn))

const _filter = _.curry((fn, array) => array.filter(fn))

const _reduce = _.curry((fn, initial, array) => array.reduce(fn, initial))

const _prop = _.curry((prop, obj) => obj[prop])

const _add = (a, b) => a + b

//const _createObj = _.curry((name, x) => ({ [name]: x }))

const _createProperty = _.curry((name, x) => Object.assign({}, { [name]: x }))

const _eqLarger = _.curry((a, b) => b >= a)

const calcTriangular = _.memoize(num => {
    if (num <= 0) return 0
    return calcTriangular(num - 1) + num
})

const isDivisor = _.curry((a, b) => a % b === 0)

const countDivisors = num => {
    const tmp = _rangeFromOne(Math.ceil(Math.sqrt(num)))      // optimization: up to square root, but then double the found divisors
        .filter(isDivisor(num))
    console.log(num, tmp.length * 2)
    return tmp.length * 2
}

//const findTriangular = _.compose(_map(_reduce(_add, 0)), _map(_rangeFromOne), _range)
const findTriangular = _.compose(_map(calcTriangular), _range)

const objectify = _.compose(_map(_createProperty('number')), findTriangular)

const findTriDivisors = _.compose(_map(x => {
    return Object.assign({}, x, { divisors: countDivisors(x.number) })
}), objectify)

const divOver = _.curry((limit, obj) => _prop('divisors', obj) > limit)

const findTriDivisorsOver = _.compose(_filter(divOver(500)), findTriDivisors)


console.log(findTriDivisorsOver(1, 13000))
//console.log(findTriDivisorsOver([{ number: 1653, divisors: 8 }]))
